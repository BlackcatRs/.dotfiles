
* TODO Intel microcode
#+begin_src  bash
sudo pacman -S intel-ucode # if AMD amd-ucode
#+end_src

* Package need by .dotfiles
#+begin_src shell
  sudo pacman -S less wget exa stow gpg emacs ranger rofi feh
#+end_src

- Using =exa= instead of =ls=.

* Themes
#+begin_src  shell
  sudo pacman gnome-themes-extra kvantum papirus-icon-theme lxappearance qt5ct
#+end_src

* Polybar
Install polybar:
#+begin_src shell
  sudo pacman -S polybar
#+end_src

* Yay
[[https://github.com/Jguer/yay][Yet Another Yogurt]] (Yay) - An AUR Helper Written in Go

The initial installation of Yay can be done by cloning the PKGBUILD and building with makepkg /(Before you begin, make sure you have the base-devel package group installed)/:
#+begin_src shell
  pacman -S --needed git base-devel
  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si
#+end_src

* TODO Firefox
Starting with Firefox 68, you can make all the Firefox interfaces and even other websites respect dark themes, irrespective of the system GTK theme and Firefox theme. To do this, set ui.systemUsesDarkTheme to 1 in about:config [13]. 

* TODO Remove file (if exist)
#+begin_src bash
  rm ~/.bash_profile ~/.bashrc
#+end_src

* Install color scirpts
#+begin_src bash
  cd ./shell-color-scripts && make clean install
#+end_src

* Install startship promt
#+begin_src bash
  curl -sS https://starship.rs/install.sh | sh
#+end_src

* Package to install for i3 vm
#+begin_src bash
sudo pacman -S xorg-xinit xorg-server i3-wm i3status
cp /etc/X11/xinit/xinitrc ~/.xinitrc
#+end_src

* TODO remote some lines at bottom
#+begin_src bash
  echo 'exec i3' >> ~/.xinitrc
#+end_src

* Show which comman has been executed
#+begin_src bash
  set -e
#+end_src

#+begin_src bash :tangle no
function insall_stow() {
    is_exist=`stow -V`
    if [ $is_exist -ne 0 ]
    then
	pacman -S stow
    fi
}
#+end_src

* Check if script runs as root
#+begin_src bash
function isRoot() {
    if [[ $(id -u) -ne 0 ]]
    then
	echo "Please run as root"
	exit 1
    fi
}
#+end_src

* TODO Fonts
:LOGBOOK:
- State "TODO"       from              [2023-12-10 Sun 12:15]
:END:

On Arch, the noto fonts for "everything" are split into:

noto-fonts for Roman, Greek, Cyrillic and probably some other alphabets, along with ASCII art nonsense and numbers and punctuation and stuff and I think some rudimentary Japanese and Chinese(?);
noto-fonts-emoji for emoji;
noto-fonts-cjk for Chinese, Japanese, and Korean characters (all of them); and
noto-fonts-extra for god knows what, I haven't looked.
With those four installed, you should always have an arbitrary character render properly. 

#+begin_src bash
  echo "Setting up Noto Emoji font..."
#+end_src

Install  noto-fonts-emoji package:
#+begin_src  shell
  pacman -S noto-fonts-emoji --needed
#+end_src

#+begin_src shell
  pacman -S powerline-fonts ttf-fira-code --needed
#+end_src

echo "Recommended system font: inconsolata regular (ttf-inconsolata or powerline-fonts)"

Add font config to /etc/fonts/conf.d/01-notosans.conf:
#+begin_src shell :tangle no
  echo "<?xml version="1.0"?>
  <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
  <fontconfig>
   <alias>
     <family>sans-serif</family>
     <prefer>
       <family>Noto Sans</family>
       <family>Noto Color Emoji</family>
       <family>Noto Emoji</family>
       <family>DejaVu Sans</family>
     </prefer> 
   </alias>

   <alias>
     <family>serif</family>
     <prefer>
       <family>Noto Serif</family>
       <family>Noto Color Emoji</family>
       <family>Noto Emoji</family>
       <family>DejaVu Serif</family>
     </prefer>
   </alias>

   <alias>
    <family>monospace</family>
    <prefer>
      <family>Noto Mono</family>
      <family>Noto Color Emoji</family>
      <family>Noto Emoji</family>
      <family>DejaVu Sans Mono</family>
     </prefer>
   </alias>
  </fontconfig>

  " > /etc/fonts/local.conf
#+end_src

Update font cache via fc-cache:
#+begin_src shell
  fc-cache -f
#+end_src

#+begin_src shell :tangle no
  echo "Noto Emoji Font installed! You may need to restart applications like chrome. If chrome displays no symbols or no letters, your default font contains emojis."
  echo "consider inconsolata regular"
#+end_src

* Touchpad and Keyboard Conf
** Touchpad
Arch supplies default configuration files in =/usr/share/X11/xorg.conf.d/=, and no extra configuration is necessary for most setups. But the =/etc/X11/xorg.conf.d/= directory stores host-specific configuration. 

#+begin_quote
Using .conf files

The /etc/X11/xorg.conf.d/ directory stores host-specific configuration. You are free to add configuration files there, but they must have a .conf suffix: the files are read in ASCII order, and by convention their names start with XX- (two digits and a hyphen, so that for example 10 is read before 20). These files are parsed by the X server upon startup and are treated like part of the traditional xorg.conf configuration file. Note that on conflicting configuration, the file read last will be processed. For this reason, the most generic configuration files should be ordered first by name. The configuration entries in the xorg.conf file are processed at the end. 

https://wiki.archlinux.org/title/Xorg
#+end_quote

xorg.conf is parsed by the X server at start-up. To apply changes, restart X.

#+begin_src :tangle /etc/X11/xorg.conf.d/30-touchpad.conf
Section "InputClass"
    Identifier "SYNA7DB5:00 06CB:CD40 Touchpad"
    Driver "libinput"
    Option "Tapping" "1"
    Option "NaturalScrolling" "1"
EndSection
#+end_src

=SYNA7DB5:00 06CB:CD40 Touchpad= is the name of device obtained using following command provided by the =xorg-input= package:
#+begin_src shell
  xinput list
#+end_src

/We can also use =libinput list-devices= command to list all devices and their respective features supported by libinput./
https://wiki.archlinux.org/title/Libinput

** Keyboard Conf
#+begin_src  :tangle /etc/X11/xorg.conf.d/90-custom-kbd.conf
"Section "InputClass"
    Identifier "keyboard defaults"
    MatchIsKeyboard "on"

    # Option "XKbOptions" "ctrl:swapcaps"
    Option "XKbOptions" "ctrl:nocaps"
EndSection
#+end_src

* Bluetooth
=Bluetooth= is a standard for the short-range wireless interconnection of cellular phones, computers, and other electronic devices. In Linux, the canonical implementation of the Bluetooth protocol stack is =BlueZ=.

1. Install the =bluez= package, providing the Bluetooth protocol stack.
2. Install the =bluez-utils= package, providing the bluetoothctl utility. Alternatively install =bluez-utils-compat=  (AUR Package) to additionally have the deprecated BlueZ tools.
3. The generic Bluetooth driver is the =btusb= kernel module. Check whether that module is loaded. If it is not, then load the module.
4. Start/enable =bluetooth.service=.

#+begin_src shell
  sudo pacman -S bluez bluez-utils
#+end_src

By default the Bluetooth daemon will only give out =bnep0= devices to users that are a member of the =lp= group. Make sure to add your user to that group if you intend to connect to a Bluetooth tether. You can change the group that is required in the file =/usr/share/dbus-1/system.d/bluetooth.conf=: 
#+begin_src shell
  sudo usermod -aG lp vts
#+end_src

** Troubleshooting
If blocked by =rfkill= then unlock it.

* Notification
[[https://wiki.archlinux.org/title/Dunst][Dunst]] is a lightweight replacement for the notification-daemons:
#+begin_src shell
  sudo pacman -S dunst libnotify
#+end_src

To use Dunst, the configuration file =.dotfiles/.config/dunst/dunstrc= must be placed or symlinked to =~/.config/dunst/dunstrc=.
Next, the =/usr/bin/dunst= should be launched, so make sure your window manager or desktop environment starts it at startup/login.
