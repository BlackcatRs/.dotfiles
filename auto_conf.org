* DONE Intel microcode
CLOSED: [2024-01-07 Sun 19:15]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-01-07 Sun 19:15]
:END:
#+begin_src  bash
sudo pacman -S intel-ucode # if AMD amd-ucode
#+end_src
* DONE Package need by .dotfiles
CLOSED: [2024-02-07 Wed 12:20]

#+begin_src shell
  sudo pacman -S git base-devel less wget exa stow man-db unzip thunderbird
#+end_src

- Using =exa= instead of =ls=.
- Password manager =pass= looks for passwords in ="$XDG_DATA_HOME"/pass= directory.
- Ranger - =ranger=, =fzf=, =locate=
- Password manager - =pass=, =pass-otp=, =xclip,= =dmenu=
- PDF viewer - =zathura=, =poppler= (engine), =zathura-pdf-poppler=
  
* DONE Themes
CLOSED: [2024-01-07 Sun 19:15]
#+begin_src  shell
  sudo pacman picom gnome-themes-extra kvantum papirus-icon-theme lxappearance qt5ct feh
#+end_src

* DONE Polybar
CLOSED: [2024-02-07 Wed 12:12]
Install polybar:
#+begin_src shell
  sudo pacman -S polybar
#+end_src

* DONE Yay
CLOSED: [2024-01-07 Sun 19:32]
[[https://github.com/Jguer/yay][Yet Another Yogurt]] (Yay) - An AUR Helper Written in Go

The initial installation of Yay can be done by cloning the PKGBUILD and building with makepkg /(Before you begin, make sure you have the base-devel package group installed)/:
#+begin_src shell
  pacman -S --needed git base-devel
  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si
#+end_src

* DONE Firefox
CLOSED: [2024-01-07 Sun 19:34]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-01-07 Sun 19:34]
:END:
Starting with Firefox 68, you can make all the Firefox interfaces and even other websites respect dark themes, irrespective of the system GTK theme and Firefox theme.

To do this, set =ui.systemUsesDarkTheme= to =1= in =about:config=.

Source - https://wiki.archlinux.org/title/firefox

* DONE Remove file (if exist)
CLOSED: [2024-01-07 Sun 19:39]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-01-07 Sun 19:39]
:END:
#+begin_src bash
  rm ~/.bash_profile ~/.bashrc
#+end_src

* DONE Install color scripts
CLOSED: [2024-02-07 Wed 11:55]
#+begin_src bash
  cd ./shell-color-scripts && make clean install
#+end_src

* DONE Install startship promt
CLOSED: [2024-02-07 Wed 12:03]
#+begin_src bash
  curl -sS https://starship.rs/install.sh | sh
#+end_src

* DONE Package to install for i3 vm
CLOSED: [2024-02-07 Wed 12:10]
#+begin_src bash
sudo pacman -S xorg-xinit xorg-server i3-wm i3status
cp /etc/X11/xinit/xinitrc ~/.xinitrc
#+end_src

* DONE Check if script runs as root
CLOSED: [2024-02-07 Wed 12:11]
#+begin_src bash
function isRoot() {
    if [[ $(id -u) -ne 0 ]]
    then
	echo "Please run as root"
	exit 1
    fi
}
#+end_src


* TODO Sound
:LOGBOOK:
- State "TODO"       from              [2024-01-01 Mon 11:29] \\
  Rephrase
:END:

The Arch sound system is organized into different layers:
1. Drivers and interface – Hardware support and control, providing device drivers for audio hardware.
2. Usermode API (libraries) – Applications interact with this layer using libraries that offer a way to access sound-related functions.
3. Usermode sound servers (optional) – These servers, if used, enhance audio capabilities, especially in complex desktops with multiple simultaneous audio applications.
4. Sound frameworks (optional) – Optional frameworks offer a more abstract interface for developers working on audio-related applications, without relying on server processes.

A default Arch installation already includes the kernel sound system (ALSA).  ALSA — The default Linux kernel component providing device drivers and lowest-level support for audio hardware.
Which means it allow to read and write from audio devices/sound cards.

=amixer= - command-line mixer for ALSA soundcard driver.

Source: https://wiki.archlinux.org/title/sound_system

** PulseAudio
Certain applications have the capability to directly record from or output to ALSA audio devices, such as sound cards or microphones. However, this can pose issues because some audio devices don't support multiplexing, preventing multiple programs from using the device simultaneously. On the other hand, devices with hardware mixing can handle multiple audio streams concurrently, mixing them into a single output and send to devices like speakers.

To address multiplexing and other limitations, sound servers are created. One such example is =PulseAudio=, which serves as an abstracted layer above ALSA. PulseAudio acts as a server, taking audio from programs considered as clients, delivering it to ALSA (driver), and from there to the sound card.

Another noteworthy sound server is =Jack=, designed for professional use. Jack functions as a sound server daemon, providing real-time, low-latency connections for both audio and MIDI data between applications following its API.

/Note: Some confusion may occur between ALSA and PulseAudio. ALSA includes a Linux kernel component with sound card drivers, as well as a userspace component, =libasound=. PulseAudio builds only on the kernel component, but offers compatibility with libasound through =pulseaudio-alsa=./

#+begin_src shell
  sudo pacman -S pulseaudio pulseaudio-bluetooth 
#+end_src
- =pulseaudio-alsa= for PulseAudio to manage ALSA as well, see [[https://wiki.archlinux.org/title/PulseAudio#ALSA][#ALSA]].
- =pulseaudio-bluetooth= for bluetooth support (Bluez), see [[https://wiki.archlinux.org/title/Bluetooth_headset][bluetooth headset]] page.

The =pactl= command can control the running PulseAudio sound server, offering only a subset of operations; for the complete set, use =pacmd=

Various front-ends, including =pamixer= for console-based volume control and =pavucontrol= for graphical interface, are available for controlling the PulseAudio daemon on Arch Linux.

Source : https://wiki.archlinux.org/title/PulseAudio

** PipeWire
PipeWire is introduced as a replacement for both PulseAudio and JACK. It aims to provide capture and playback for both audio and video with minimal latency. PipeWire supports PulseAudio, JACK, ALSA, and GStreamer-based applications, offering a comprehensive solution for various audio and video needs.


PipeWire is a audio and video server that replaces PulseAudio, offer capture and playback for both audio and video with minimal latency and support for PulseAudio, JACK, ALSA and GStreamer-based applications:
#+begin_src shell
  sudo pacman -S pipewire 
#+end_src
- Install =lib32-pipewire= [fn:1] for multilib support. 

Like JACK, PipeWire implements no connection logic internally. The burden of watching for new streams and connect them to the appropriate output device or application is left to an external component known as a session manager:
#+begin_src shell
  sudo pacman -S wireplumber
#+end_src

Install the following to use PipeWire as audio server:
#+begin_src shell
  sudo pacman -S pipewire-alsa pipewire-pulse pipewire-jack 
#+end_src
- Install =pipewire-alsa= (and remove =pulseaudio-alsa= if it was installed) to route all applications using the ALSA API through PipeWire. 
- Replaces the =pulseaudio= and =pulseaudio-bluetooth=. Reboot, re-login or stop =pulseaudio.service= and start the =pipewire-pulse.service= user unit to see the effect.
  To check the good fuction of the service run the command ~pactl info~ and check for string "Server Name: PulseAudio (on PipeWire x.y.z)" in the output.
- The =pipewire-jack= for JACK support. There is also =lib32-pipewire-jack= for multilib support.

*** Bluetooth devices
PipeWire can also handles Bluetooth audio devices if the =pipewire-audio= package is installed
#+begin_src shell
  sudo pacman -S pipewire-audio
#+end_src

*** TODO Patchbay
:LOGBOOK:
- State "TODO"       from              [2024-01-01 Mon 19:48] \\
  Don't know whether it works with audio and video
  wathch the yt video
:END:
We could also install patchbay audio to redirect a audio stream to audio device or application:
#+begin_src shell
  sudo pacman -S qpwgraph
#+end_src

*** References
- [[https://wiki.archlinux.org/title/PipeWire][PipeWire]]

* Footnotes
[fn:1] Enable the multilib repository in pacman.conf to install 32-bit binaries.
