#+PROPERTY: header-args :tangle README.el

* Table of Contents :toc:
- [[#requirements][Requirements]]
  - [[#fonts][Fonts]]
- [[#basic-ui-customization][Basic UI Customization]]
- [[#font-configuration][Font Configuration]]
- [[#package-configuration][Package Configuration]]
- [[#helpful-ui-improvements][Helpful UI Improvements]]
  - [[#doom-modeline][Doom-modeline]]
  - [[#doom-themes][Doom-themes]]
  - [[#rainbow-delimiters][Rainbow-delimiters]]
  - [[#ivy][Ivy]]
  - [[#ivy-rich][Ivy-rich]]
  - [[#which-key][Which-key]]
  - [[#helpful][Helpful]]
  - [[#visual-fill-column][Visual-fill-column]]
- [[#key-bindings][Key bindings]]
  - [[#command-log-mode][Command-log-mode]]
  - [[#custom-key-bindings][Custom key bindings]]
- [[#projectile-and-magit][Projectile and Magit]]
  - [[#projectile][Projectile]]
  - [[#counsel-projectile][Counsel-projectile]]
  - [[#magit][Magit]]
  - [[#forge][Forge]]
- [[#execute-a-shell-command-as-sudo][Execute a shell command as sudo]]
- [[#waiting-open-a-file-as-sudo-slow-up-the-emacs-when-using-this-function][WAITING Open a file as sudo [Slow up the Emacs when using this function]]]
- [[#programming-language-highlighting-automatic-indentation][Programming language highlighting, automatic indentation...]]
  - [[#assembly][Assembly]]
  - [[#powershell][Powershell]]
  - [[#markdown][Markdown]]
  - [[#yaml][YAML]]
- [[#auto-table-of-content-for-markdown-and-org][Auto table of content for Markdown and Org]]
- [[#mode-configuration][Mode configuration]]
- [[#emacs-backup-files][Emacs backup files]]
- [[#org][Org]]
  - [[#org-mode-basics-configuration][Org-mode Basics Configuration]]
  - [[#org-agenda][Org-agenda]]
  - [[#push-notification][Push notification]]
  - [[#org-file-to-markdown][Org file to Markdown]]
- [[#spell-check-and-correction][Spell check and correction]]
- [[#eshell][Eshell]]
  - [[#keybinding-to-clear-eshell-buffer][Keybinding to clear eshell buffer]]
- [[#org-roam][Org-roam]]
  - [[#prerequisites][Prerequisites]]
  - [[#org-roam-config][Org-roam config]]
  - [[#key-bindings-1][Key bindings]]
  - [[#references][References]]
- [[#hold-mail][HOLD Mail]]
  - [[#mu4e][Mu4e]]
- [[#footnotes][Footnotes]]

* Requirements
** Fonts
*** [[https://github.com/tonsky/FiraCode][FiraCode]]
First make sure that the =contrib= (for Debian) repository is enabled (see Debian [[https://wiki.debian.org/SourcesList#Component][docs]]) and then install ~fonts-firacode~ package  by executing:
#+begin_src shell :tangle no
sudo apt install fonts-firacode 
#+end_src

* Basic UI Customization
Deactivating default Emacs interface option:
#+begin_src emacs-lisp :results none
  (setq inhibit-startup-message t) ; Hide welcome message
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
  (hl-line-mode)              ; Highlight cursor pointing line
  (show-paren-mode)	       ; Highlight opening and closing paren
#+end_src

Display column and line number:
#+begin_src emacs-lisp :results none
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  markdown-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Set up the visible bell:
#+begin_src emacs-lisp :results none :tangle no
(setq visible-bell t) ; Set up the visible bell
#+end_src

* Font Configuration
#+begin_src emacs-lisp :results none
  ;; Font and font size of Emacs window
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 100)

  ;; Font and font size of source code block in Org mode
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 100)

  ;; Font and font size of Heading and text in Org mode
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 100 :weight 'Regular)
#+end_src

* Package Configuration
Package configuration:
#+begin_src emacs-lisp :results none
  ;; Load a package call "package" to handle package fuctions 
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Load Emacs Lisp packages, and activate them.
  (package-initialize)

  ;; Automatically update the list of packages, only if there is no package list already
  (when (not package-archive-contents)
    (package-refresh-contents))
#+end_src


Install =use-package= package if not exists which allow to download a packages from =package-archives= and configure the package in an isolated way or in other words inside =use-package= block.
Functions ends up with =-p= like =package-installed-p= return boolean as result:
#+begin_src emacs-lisp :results none
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t) ; Ensure that the package is loaded
#+end_src

* Helpful UI Improvements
** Doom-modeline
A status bar at bottom:
#+begin_src emacs-lisp :results none
  ;; Bottom bar
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 20)))
#+end_src

** Doom-themes
#+begin_src emacs-lisp :results none :results none
  ;; Download doom themes
  (use-package doom-themes)
  (load-theme 'doom-one t)
#+end_src

** Rainbow-delimiters
Display parentheses with a color to easily identify them:
#+begin_src emacs-lisp :results none
  ;; Parentheses with colors
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Ivy
Flexible and simple tools for minibuffer completion in Emacs: 
- =Ivy=, a generic completion mechanism for Emacs.
- =Counsel=, a collection of Ivy-enhanced versions of common Emacs commands.
- =Swiper=, an Ivy-enhanced alternative to Isearch.
  
#+begin_src emacs-lisp :results none
;; No need to manually install Swiper or Ivy, it will install as dependencies with Counsel
  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)	
	   ("C-l" . ivy-alt-done)
	   ("C-n" . ivy-next-line)
	   ("C-p" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

#+end_src

** Ivy-rich
Display a short description near each function when using =counsel-M-x= or pressing =M-x=:
#+begin_src emacs-lisp :results none
  ;; Show a description near each function whenrunning counsel-M-x
  (use-package ivy-rich
    :init
    (ivy-rich-mode))
#+end_src

** Which-key
Display keys that follow a prefix key with function:
#+begin_src emacs-lisp :results none
  ;; Display keys that follows the prefix key
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5))
#+end_src

** Helpful
A replacement for the built-in help text that improves the readability of help text:
#+begin_src emacs-lisp :results none
  ;; Beautify help text, ex C-h 
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Visual-fill-column
Text alignment in the buffer:
#+begin_src emacs-lisp
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    ;; Wrap a line when it exceeds the width defined by
    ;; visual-fill-column-width instead of truncating it by placing \n
    ;; at the end of the line.
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    ;; Call the org-mode-visual-fill to set parms of visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill)
    (markdown-mode . efs/org-mode-visual-fill))

#+end_src

* Key bindings
** Command-log-mode
Package that display key presses:
#+begin_src emacs-lisp :results none :tangle no
  (use-package command-log-mode)
#+end_src

** Custom key bindings
Use =escape= key to quit or close prompts:
#+begin_src emacs-lisp :results none
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* Projectile and Magit
This section is inspired from this [[https://www.youtube.com/watch?v=INTu30BHZGk][video]].
** Projectile
#+begin_src emacs-lisp :results none
;; Projectile provide features operating on project level.
(use-package projectile
  :diminish projectile-mode
  ;; Load projectile mode globally
  :config (projectile-mode)
  ;; ivy is the completion system to be used by Projectile
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/git")
    (setq projectile-project-search-path '("~/git")))
  (setq projectile-switch-project-action #'projectile-dired))
#+end_src

*** Key bindings

| Keys    | Description     |
|---------+-----------------|
| C-c p   | Prefix key      |
| C-c p f | Search files    |
| C-c p p | Search projects |

*** Directory local variable
Setting the directory local variable which contain value that is proper to that folder only, for an example we can set a value for =projectile-project-run-cmd= value which execute code in a current folder or when we press =C-c p u= to run project.

To do so run =C-c p e= and select =projectile-project-run-cmd= and give it a value that run the code that is in that directory, e.g =npm start=. and every time we press the =C-c p u= it will execute the command =npm start=.

*** Search string inside all files
We can search for  a string inside all files within a folder using =counsel-projectile-rg= (=C-c p s r=) function which uses ~ripgrep~ (rg) program as backend which is an implementation of ~grep~ in Rust.

So first install using your package manager:
#+begin_src shell :tangle no
  sudo pacman -S ripgrep
#+end_src

** Counsel-projectile

#+begin_src emacs-lisp :results none
  ;; cousel-projectile provide more action when pressing Alt-o in
  ;; mini-buffer when using projectile-switch-project
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

** Magit
#+begin_src emacs-lisp :results none
(use-package magit
  :custom
  ;; Stop creating a new window when doing diff
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

*** Key bindings
- =C-x g= OR =magit-status= Open git menu buffer
- =?= Git help menu

- =s= Stage a file 
- =S= Stage all files
- Select the text and press =s= to stage only the selected text

- =u= Unstage a file 
- =U= Unstage all files

- =c= Show commit related actions
- =cc= Open commit capture buffer and =C-c C-c= OR =C-c C-k= abort commit capture buffer
- =cF= Add a changes to already pushed commit

- =b= Show branch related actions
- =bs= Reset the last commit from actual branch and create new branch with that changes.

- =z= Stash related actions

- =P= Push related commands 
- =Pf= Force push can be done if local git history does not match with remote.

- =r= Rebase related actions 
- =ri= Rebase interactively

** Forge
Manage git notif, issues, pull request, etc from Emacs.
*NOTE: Make sure to configure a GitHub token before using this package!*
  - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
#+begin_src emacs-lisp :results none :tangle no
  (use-package forge)
#+end_src

* Execute a shell command as sudo 
#+begin_src emacs-lisp :results none :tangle no
;; Run a command as sudo
(defun sudo-shell-command (command)
  (interactive "MShell command (root): ")
  (with-temp-buffer
    (cd "/sudo::/")
    (async-shell-command command)))
#+end_src

* WAITING Open a file as sudo [Slow up the Emacs when using this function]
- State "WAITING"    from "HOLD"       [2023-04-09 dim. 10:23] \\
  Need basic knowledge in Emacs lisp
#+begin_src emacs-lisp :results none
;; Open a file as sudo
(defun sudo-find-file (file-name)
  "Like find file, but opens the file as root."
  (interactive "FSudo Find File: ")
  (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name)))

;; Press Ctrl+c and Ctrl+s to run sudo-find-file function
(global-set-key (kbd "C-c C-s") 'sudo-find-file)
#+end_src

* Programming language highlighting, automatic indentation... 
** Assembly
*** masm-mode
~masm-mode~ is a major mode for editing MASM x86 and x64 assembly code. It includes syntax highlighting, automatic comment indentation and various build commands:
#+begin_src emacs-lisp :results none :tangle no
  (use-package masm-mode)
#+end_src

*** nasm-mode
A major mode for editing NASM x86 assembly programs. It includes syntax highlighting, automatic indentation, and imenu integration. Unlike Emacs' generic `asm-mode`, it understands NASM-specific syntax:
#+begin_src emacs-lisp :results none
  ;; Assembly language highlighting
  (use-package nasm-mode)
#+end_src

** Powershell
#+begin_src emacs-lisp :results none
;; Powershell mode
(use-package powershell)
#+end_src

** Markdown
~markdown-mode~ is a major mode for editing Markdown-formatted text.This mode provide syntax highlight and some shortcuts:
#+begin_src emacs-lisp :results none
  ;; Mardown language highlighting
  (use-package markdown-mode
    :ensure t
    ;; Apply general mode configuration
    :hook (markdown-mode . efs/all-mode-setup)
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src

** YAML
Major mode to edit YAML file:
#+begin_src emacs-lisp :results none
(use-package yaml-mode)
;; (require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-hook 'yaml-mode-hook
      '(lambda ()
        (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+end_src

* Auto table of content for Markdown and Org
~toc-org~ helps you to have an up-to-date table of contents in org or markdown files without exporting (useful for readme files on GitHub).

*NOTE: Previous name of the package is org-toc. It was changed because of a name conflict with one of the org contrib modules.*
#+begin_src emacs-lisp :results none
  (use-package toc-org)
  (if (require 'toc-org nil t)
      (progn
	(add-hook 'org-mode-hook 'toc-org-mode)

	;; enable in markdown, too
	(add-hook 'markdown-mode-hook 'toc-org-mode)
	;; markdown-mode package does not define markdown-mode-map
	;; (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point)
	)
    (warn "toc-org not found"))
#+end_src

=require= takes following arguments:
#+begin_src emacs-lisp :results none :tangle no
(require FEATURE &optional FILENAME NOERROR)
#+end_src

The =NOERROR= argument causes the function to return =nil= when file with the feature isn't found. Without that argument set to =t=, you'd get an *error*.

* Mode configuration
The =efs/all-mode-setup= function is inspired by the DRY principle which aims to reduce repetitions. This function contains general parameters which will be used in more than one mode. By the way =efs= is namespace that contains all my custom functions to avoid mixing with other functions.

#+begin_src emacs-lisp :results none
  (defun efs/all-mode-setup ()
    (visual-line-mode 1))
#+end_src

- =visual-line-mode= This variable allows to visually wrap a line which exceeds the width of the buffer or in other words, instead of wrapping a line which exceeds the width of the buffer by placing a character =\n=, it will simply display the exceeded line on the next line

* Emacs backup files
#+begin_src emacs-lisp :results none
;; Save all emacs backup files (files ending in ~) in ~/.emacs.d/backup
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
 )
#+end_src

* Org
** Org-mode Basics Configuration
*** Org-mode
#+begin_src emacs-lisp :results none
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces (display options like font, size, etc) for heading levels
    (dolist (face '((org-level-1 . 1.1)
                    (org-level-2 . 1.0)
                    (org-level-3 . 0.95)
                    (org-level-4 . 0.90)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Fira Code" :weight 'Medium :height (cdr face)))
    
    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  ;; Activate some option in Org mode
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (org-overview) ;; Show only headings
    ;; This prevent org-capture buffer from opening
    ;; (forward-page) ;; Goto the bottom of the page
    ) 

  (use-package org
    :hook ((org-mode . efs/org-mode-setup)
           (org-mode . efs/all-mode-setup))
    :config
    (setq org-ellipsis " ▾" ;; Replace ... at the end of each headings with ▾
          ;; Output the result string instead of showing synctaxe.
          ;; e.g : *Bold* transforme into bold text.  
          org-hide-emphasis-markers t)

    (efs/org-font-setup))  
#+end_src

Custom state that representing the flow order.
=TODO=:    An event that need to done at scheduled time
=ONGOING=: Currently working on that section/subject
=NEXT=:    An event must be scheduled after the end of the previous TODO event.
=DONE=:    A finished event.

=WAITING=: A pending event due to the absence of a dependency.
=HOLD=: A scheduled event temporarily suspended but to be scheduled in the future.
=CANCELLED=: An event cancelled for a reason
#+begin_src emacs-lisp :results none
;; Custom states 
(setq org-todo-keywords
      '((sequence "TODO(t@/!)" "ONGOING(o@/!)" "NEXT(n@/!)" "|" "DONE(d)")
	;; This states store a timestamp and note
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
#+end_src

Predefined tags that can be accessible from any org file:
#+begin_src emacs-lisp :results none
  (setq org-tag-alist
        '((:startgroup)
          (:endgroup)
          ("@PERSO" . ?h)
          ("@WORK" . ?w)
          ("Appointment" . ?a)
          ("Planning" . ?p)
          ("Note" . ?n)
          ("Idea" . ?i)))
#+end_src

*** Org-bullets
Change default Org heading style: 
#+begin_src emacs-lisp :results none
  ;; Change headings bullet points using org-bullets package
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Org-agenda
=org-return-follows-link= will open the task file when you press Enter key on any task in Org agenda.
=org-agenda-tags-column 75= indicates space between task heading and tags
=org-use-speed-commands= using single key to execute an action.
=org-use-speed-commands t= allow us to use single key to execute an action
#+begin_src emacs-lisp :results none
  (setq org-return-follows-link t ;; Press enter key on the task will open the task file
        org-agenda-tags-column 75   ;; Space between task heading and tags
        org-deadline-warning-days 5 ;; Dispaly tasks with deadline 5 days
        org-use-speed-commands t)   ;; Use single key to execute an action
#+end_src

Refiling or moving unwanted item usually finished tasks to different place for archiving purpose:
#+begin_src emacs-lisp :results none
  (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
          ("Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

Show the final state of the captured item in the agenda view to track what happened, such as =COMPLETED= or =CANCELED= tasks:
#+begin_src emacs-lisp :results none
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
#+end_src

Habit tracking with ~org-habit~ package:
#+begin_src emacs-lisp :results none
;; Habit tracking package
(require 'org-habit)
;; Load org-habit by adding org-habit to org-modules
(add-to-list 'org-modules 'org-habit)
;; This is the lenth of org habit tracker in agenda view
(setq org-habit-graph-column 60)
#+end_src

The following code block executes only if the =~/.emacs.d/vars.el= file exists which contains variables with path to Org file. Ex =(defvar voc/todo "~/Org/TODO.org").=

First at all, we define our list of Org Agenda files with =org-agenda-files= variable which will be used for storing different type events. 

Next we define Org capture template in order to save events using =org-capture-templates= variable.

Last block of code will collect information from our various Org files where we have captured tasks and/or notes and display them as we want. This is done by customizing the variable =org-agenda-custom-commands=, so for more details on customization we can use =describe-variable= and =org-agenda-custom-commands=. We can also  Emacs' documentation by pressing =C-h i > d > m > Org mode > m > Block agenda=:
#+begin_src emacs-lisp :results none
   ;; Org Agenda
   (load-file "~/.emacs.d/vars.el")

   (setq org-agenda-files (list
                           voc/todo
                           voc/events
                           voc/repeaters))

   ;; Capture tasks
   (setq org-capture-templates
         '(("c" "Unscheduled Task" entry (file+headline voc/todo "Unscheduled Tasks")
            "* HOLD %?\n Entered on <%<%Y-%m-%d %H:%M>> \n" :empty-lines 1)

           ("l" "Task with File Link" entry (file+headline voc/todo "Unscheduled Tasks")
            "* HOLD %?\n Entered on <%<%Y-%m-%d %H:%M>>\n %a\n %i" :empty-lines 1)

           ("s" "Scheduled Task" entry (file+headline voc/events "Scheduled Tasks")
            "* TODO %?\n SCHEDULED: %^t\n %U" :empty-lines 1)

           ("d" "Deadline" entry (file+headline voc/repeaters "Recursive Tasks")
            "* TODO %? %(org-set-tags-command)\n  DEADLINE: %^t" :empty-lines 1)

           ("n" "Note" entry (file+headline voc/todo "Notes")
            "* %? %^G\n %U" :empty-lines 1)

           ("j" "Journal" entry (file+olp+datetree voc/journal)
            "* [%<%H:%M>]\n %?" :empty-lines 1)
           ))
#+end_src

Defining shortcuts to view Org Agenda and to capture tasks:
#+begin_src emacs-lisp :results none
  ;; Dashboard
  (set-face-attribute 'org-scheduled-today nil :foreground "#DFDFDF" :inherit 'org-scheduled-previously)
  (set-face-attribute 'org-scheduled-previously nil :foreground "#9ca0a4")

  (set-face-attribute 'org-agenda-structure nil :foreground "#a9a1e1" :weight 'ultra-bold)
  (set-face-attribute 'org-agenda-date nil :foreground "#CE93D8" :weight 'light)

  (defvar voc-org-custom-daily-agenda
    `((agenda "" ((org-agenda-span 1)
                  (org-deadline-warning-days 0)
                  ;; Show all past scheduled items that are not yet finished or with TODO state
                                          ;(org-scheduled-past-days 0)
                  ;; Set the the value of "org-agenda-date" face to "org-agenda-date" face
                  (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                  (org-agenda-entry-types '(:scheduled))
                  ;; (org-agenda-format-date "%A %-e %B %Y")
                  (org-agenda-time-grid nil)
                  (org-agenda-overriding-header "Today's Agenda")))

      (tags-todo "*" ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                      (org-agenda-block-separator ?_)
                      (org-agenda-skip-function
                       `(org-agenda-skip-entry-if
                         'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                      (org-agenda-overriding-header "Important Unscheduled Tasks")))

      (todo "ONGOING" ((org-agenda-start-on-weekday nil)
                       (org-agenda-block-separator ?_)
                       (org-agenda-overriding-header "Ongoing Tasks")))

      (agenda "" ((org-agenda-start-on-weekday nil)
                  (org-agenda-compact-blocks nil)
                  (org-agenda-start-day "+1d")
                  (org-agenda-span 3)
                  (org-deadline-warning-days 0)
                  (org-agenda-block-separator ?_)
                  ;; (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("DONE" "WAITING" "HOLD" "CANCELLED")))
                  (org-agenda-overriding-header "Upcoming Tasks (+3d)")))

      (tags-todo "-Book/HOLD" ((org-agenda-start-on-weekday nil)
                               (org-agenda-block-separator ?_)
                               (org-agenda-overriding-header "Unscheduled Tasks")
                               (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
                               (org-agenda-skip-function
                                `(org-agenda-skip-entry-if
                                  'regexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))))

      (agenda "" ((org-agenda-time-grid nil)
                  (org-agenda-start-on-weekday nil)
                  (org-agenda-start-day "+4d")
                  (org-agenda-span 14)
                  (org-agenda-show-all-dates nil)
                  (org-deadline-warning-days 0)
                  (org-agenda-block-separator ?_)
                  (org-agenda-entry-types '(:deadline))
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("DONE" "WAITING" "HOLD" "CANCELLED")))
                  (org-agenda-overriding-header "Upcoming Deadlines (+14d)")))

      (tags-todo "Book/HOLD" ((org-agenda-block-separator ?_)
                              (org-agenda-overriding-header "Books To Read")))))

  (setq org-agenda-custom-commands
        `(("a" "Daily agenda and top priority tasks"
           ,voc-org-custom-daily-agenda)
          ("P" "Plain text daily agenda and top priorities"
           ,voc-org-custom-daily-agenda
           ((org-agenda-with-colors nil)
            (org-agenda-prefix-format "%t %s")
            (org-agenda-current-time-string ,(car (last org-agenda-time-grid)))
            (org-agenda-fontify-priorities nil)
            (org-agenda-remove-tags t))
           ("agenda.txt"))))


  ;; Global keyboard shortcuts
  (global-set-key (kbd "C-c c") #'org-capture)
  (global-set-key (kbd "C-c a") #'org-agenda)
#+end_src

** Push notification
*** CANCELLED Method 1
CLOSED: [2023-06-26 lun. 08:30]
:LOGBOOK:
- State "CANCELLED"  from              [2023-06-26 lun. 08:30] \\
  This method has never been tested and instead we use method 3.
:END:
#+begin_src emacs-lisp :results none :tangle no
  (defun djcb-popup (title msg &optional icon sound)
  ;;   "Show a popup if we're on X, or echo it otherwise; TITLE is the
  ;; title of the message, MSG is the context. Optionally, you can provide
  ;; an ICON and a sound to be played"

    (interactive)
    ;; (when sound (shell-command
    ;;              (concat "mplayer -really-quiet " sound " 2> /dev/null")))
    (if (eq window-system 'x)
        (shell-command (concat "notify-send "
                               (if icon (concat "-i " icon) "")
                               " '" title "' '" msg "'"))
      ;; text only version
      (message (concat title ": " msg))))


  (djcb-popup "Warning" "The end is near"
     "/usr/share/icons/Papirus/8x8/emblems/emblem-mounted.svg" "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga")

  ;; the appointment notification facility
  (setq
   appt-message-warning-time 1 ;; warn 15 min in advance

   appt-display-mode-line t     ;; show in the modeline
   appt-display-format 'window) ;; use our func


  (appt-activate 1)              ;; active appt (appointment notification)
  (display-time)                 ;; time display is required for this...

  ;; update appt each time agenda opened
  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

  ;; our little façade-function for djcb-popup
  (defun djcb-appt-display (min-to-app new-time msg)
    (djcb-popup (format "Appointment in %s minute(s)" min-to-app) msg 
                "/usr/share/icons/Papirus/8x8/emblems/emblem-mounted.svg"
                ;; "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga"
                ))

  (setq appt-disp-window-function (function djcb-appt-display))
#+end_src

*** CANCELLED Method 2
CLOSED: [2023-06-26 lun. 08:33]
:LOGBOOK:
- State "CANCELLED"  from              [2023-06-26 lun. 08:33] \\
  This method has never been tested and instead we use method 3.
:END:
#+begin_src emacs-lisp :results none :tangle no
  (require 'notifications)

  (defun my-on-action-function (id key)
    (message "Message %d, key \"%s\" pressed" id key))


  (defun my-on-close-function (id reason)
    (message "Message %d, closed due to \"%s\"" id reason))


  (notifications-notify
   :title "Hi"
   :body "This is <b>important</b>."
   :actions '("Confirm" "I agree" "Refuse" "I disagree")
   :on-action 'my-on-action-function
   :on-close 'my-on-close-function)
#+end_src

*** Method 3
Org-wild-notifier requires the Dunst notification daemon and Emacs as daemon to display Org agenda events.
#+begin_src emacs-lisp :results none :tangle yes
  (use-package org-wild-notifier
    :ensure t
    :custom 
    (alert-default-style 'notifications)
    (org-wild-notifier-alert-time '(1 10 30))
    (org-wild-notifier-keyword-whitelist '("TODO"))
    (org-wild-notifer-notification-title "Org wild notifier")
    :config
    (org-wild-notifier-mode 1))
#+end_src

** Org file to Markdown
*** Installation
First we need to install the ~ox-hugo~ package which is an Org exporter backend that exports Org to Hugo-compatible Markdown ([[https://github.com/russross/blackfriday][Blackfriday]]) and generates also the front-matter (in TOML or YAML format). And it is recommended to install this package from Melpa (not Melpa Stable): 
#+begin_src emacs-lisp :results none
(use-package ox-hugo
  :ensure t   ;Auto-install the package from Melpa
  :pin melpa  ;`package-archives' should already have ("melpa" . "https://melpa.org/packages/")
  :after ox)
#+end_src

*** Auto-export on Saving
I only want to export certain Org files to Hugo-compatible Markdown but ~ox-hugo~ can also [[https://ox-hugo.scripter.co/doc/auto-export-on-saving/#enable-for-the-whole-project][export all Org files]] in a specified directory to Markdown.  In order to export a particular Org file to Markdown we need to add the following heading section to Org file that we want to export to Markdown:
#+begin_src org :results none :tangle no
 * Footnotes
 * COMMENT Local Variables                                           :ARCHIVE:
   # Local Variables:
   # eval: (org-hugo-auto-export-mode)
   # End:
#+end_src

*About Footnotes:* Here I recommend adding the =Footnotes= header manually so that in case you add any Org footnotes, they go directly to that section you created. Otherwise, Org will auto-create a new Footnotes heading at the end of the file and the =COMMENT Local Variables= heading would then no longer be at the end of the file. This will prevents =org-hugo-auto-export-mode= minor mode from activating.

*** Usage
In order to export Org file to Markdown, we first need to setup some Org keyword to tell ~ox-hugo~ where to place generated Markdown file and some extra data  (front-matter data) to insert into generated Markdown file:

Mandatory Org keywords in for "[[https://ox-hugo.scripter.co/doc/blogging-flow/][One post per Org file]]" blogging flow: 
- =#+hugo_base_dir: .= Path to store generated Markdown file
- =#+title: Introduction to ox-hugo= Title of the Hugo post

[[https://ox-hugo.scripter.co/doc/org-meta-data-to-hugo-front-matter/][Front-matter]]:
- =#+hugo_section: notes= Name of the section (a subfolder under =#+hugo_base_dir= folder) to store the generated Markdown file
- =#+hugo_front_matter_format: yaml= Generate front-matter in YAML format  
- =#+date: 2017-07-24= Creation date
- =#+hugo_auto_set_lastmod: t= Date the file was last modified
- =#+hugo_tags: toto zulu= Add tags =toto= and =zulu= to front-matter
- =#+hugo_categories: x y= Add categories
- =#+hugo_custom_front_matter: :languages '(French)= My custom taxonomies that i use in Hugo ([[https://ox-hugo.scripter.co/doc/custom-front-matter/][More info]])
- =#+hugo_draft: true= Indicates whether the file is ready to publish or not. 
- =#+OPTIONS: toc:t= Generate automatically table of content.

* Spell check and correction
#+begin_src emacs-lisp :results none
;; Start - Checking and Correcting Spelling --------------------------

;; This section describes the commands to check the spelling of a single
;; word or of a portion of a buffer. These commands only work if a
;; spelling checker program, one of Hunspell, Aspell, Ispell or Enchant,
;; is installed. These programs are not part of Emacs, but can be
;; installed. So install aspell, aspell-fr aspell-en.

;; Tell Emacs to use Aspell instead of the default spell checker. Use
;; command 'which aspell' from the shell to get the path to Aspell's
;; executable.
(setq ispell-program-name "/usr/bin/aspell")

;; Set default language to spell 
(setq ispell-local-dictionary "english")

;; Quickly switch language by pressing F10 key.
;; Adapted from DiogoRamos' snippet on https://www.emacswiki.org/emacs/FlySpell#h5o-5
(let ((langs '("francais" "english")))
  (defvar lang-ring (make-ring (length langs))
    "List of Ispell dictionaries you can switch to using ‘cycle-ispell-languages’.")
  (dolist (elem langs) (ring-insert lang-ring elem)))

(defun cycle-ispell-languages ()
  "Switch to the next Ispell dictionary in ‘lang-ring’."
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)))

(global-set-key [f10] #'cycle-ispell-languages) ; replaces ‘menu-bar-open’.

;; Activate flyspell-mode for markdown-mode or other modes (e.g
;; text-modes)
(dolist (hook '(markdown-mode-hook org-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))

;; Stop flyspell-mode for change-log-mode and log-edit-mode.
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))

;; Check the buffer and light up errors with "langtool" we use the
;; langtool-check function each time we save the buffer using
;; after-save-hook.
(use-package langtool)
(add-hook 'markdown-mode-hook	  
          (lambda () 
             (add-hook 'after-save-hook 'langtool-check nil 'make-it-local)))
;; End - Checking and Correcting Spelling ----------------------------
#+end_src
* Eshell
** Keybinding to clear eshell buffer
#+begin_src emacs-lisp :results none
;; Function to clear the Emacs shell buffer, we can also use
;; comint-clear-buffer which is bound to C-c M-o in Emacs v25+
;; voc = vts own config
(defun voc/clear-term ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))

;; Map voc/clear-term to C-c l key
(defun voc/shell-hook ()
  (local-set-key "\C-cl" 'voc/clear-term))

;; Use this shortcut only in shell mode
(add-hook 'shell-mode-hook 'voc/shell-hook)
#+end_src

* Org-roam
Org Roam is an extension to Org Mode which help to create topic-focused Org files and link them together. It's is inspired by a program called ~Roam~ and a note-taking strategy called ~Zettlekasten~.

** Prerequisites
Org Roam uses a database to keep track of "nodes" (a file with a specific content) and links between nodes in a efficient way.

Org Roam v2 package uses a customized build of SQLite database, so Org Roam need C/C++ compiler like =gcc= or =clang= installed on the system.

** Org-roam config
#+begin_src emacs-lisp :results none :tangle yes
  (if (file-exists-p "~/.emacs.d/vars.el")
      (progn 
        (use-package org-roam
          :ensure t
          :custom
          (org-roam-directory voc/RoamNotes)
          (org-roam-completion-everywhere t)
          (org-roam-dailies-capture-templates
           '(("d" "default" entry "* Résumé \n%? \n* A améliorer \n\n* Terminé \n"
              :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
          (org-roam-capture-templates
           '(
             ("d" "Default" plain
              "%?"
              :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
              :unnarrowed t)

             ("l" "Programming language" plain
              "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
              :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
              :unnarrowed t)

             ("b" "Book Notes" plain
              "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
              :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
              :unnarrowed t)

             ("p" "Project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates - Deadlines|Events|Release|Dailies\n\n"
              :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
              :unnarrowed t)
             ))

          :bind (("C-c n l" . org-roam-buffer-toggle)
                 ("C-c n f" . org-roam-node-find)
                 ("C-c n i" . org-roam-node-insert)
                 ("C-c n c" . org-roam-capture)
                 :map org-mode-map
                 ("C-M-i    .  completion-at-point")
                 :map org-roam-dailies-map
                 ("Y" . org-roam-dailies-capture-yesterday)
                 ("T" . org-roam-dailies-capture-tomorrow))
          :config
          ;; Reload the custom keybindings that defined above
          (org-roam-setup)

          :bind-keymap
          ("C-c n d" . org-roam-dailies-map)

          :config
          (require 'org-roam-dailies) ;; Ensure the keymap is available
          (org-roam-db-autosync-mode)
          (setq org-roam-dailies-directory "Journal/"))))
#+end_src

*** Org Roam Capture Template
In the Org-roam capture template, the =d= represents the shortcut key to select a node template and =default= is used as a name to node template. =%?= is the org mode syntax that indicates where the cursor lands in a node file. The code =%<%Y%m%d%H%M%S>-${slug}.org= creates a unique string for node file name and =#+title: ${title}\n= sets the title in the node file. =:unnarrowed t= expands the node file or show the entire content of the file without folding the content.

We can also create Org-roam capture template using Org Mode's capture template syntax. For example =%^{Author}= is Org mode syntax which prompt user for a string. Note the difference between Org mode capture syntax which start with =%^= and Org-roam capture syntax starts with =$=.

Another useful template that we can create is for capturing details about a new, particularly the tasks, goals, and any important dates you might need to remember. The new thing we've added this time is the =#+filetags: Project= configuration inside of the =file+head= section. We can use this =Project= string as a tag to get a customized view in Org Agenda using Org Roam DB API. The tag may also show up in your completion list if you're using ~Vertico~ and ~Marginalia~, check out this [[https://www.youtube.com/watch?v=J0OaRy85MOo][video on Vertico]].

*** Optional - Org Roam capture template in a Org file
We can also define capture template in a =BookNoteTemplate.org= Org file under a subfolder =Template/= into Org Roam folder (defined by =org-roam-directory)=: 
#+begin_src org :results none :tangle no
 * Source
   Author: %^{Author}
   Title: ${title}
   Year: %^{Year}

 * Summary
   %?
#+end_src

And then specify the location of Org-roam template location:
#+begin_src emacs-lisp :results none :tangle no
  ("b" "Book notes" plain
   (file "~/RoamNotes/Template/BookNoteTemplate.org")
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
   :unnarrowed t)
#+end_src

*** Org Roam Dailies (Or Journal)
The benefit of using Org Roam Dailies as a journaling tool is the ability to link notes as all journal notes are stored as Org Roam nodes.

Before we can create and view journal entries, we first need to create a folder. By default, Org Roam will create journal files under the =daily/= subfolder of your =org-roam-directory=. In our case inside =~/lab/emacs/RoamNotes= folder.

We can change the folder name =daily/= to something else, for example to =Journal/=:
#+begin_src emacs-lisp :results none :tangle no
(setq org-roam-dailies-directory "Journal/")
#+end_src

We can also add one or more journal capture templates like the org capture template, the following snippet redefines the default journal capture template:
#+begin_src emacs-lisp :results none :tangle no
  (org-roam-dailies-capture-templates
   '(("d" "default" entry "* Résumé \n%? \n* A améliorer \n\n* Terminé \n"
      :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
#+end_src

** Key bindings
*** Org Roam
- =C-c n f= Open a node [fn:1] and if not exists prompt you with a Org-roam capture template
- =C-c n l= Indicates backlinks (where the actual node is used or linked).
- =C-c n i= Insert a link to a node and if not exists prompt you with a Org-roam capture template.
- =C-c n c= Create a node and back to original location after save.
- =C-M i= Auto completion of node links.
- =org-id-get-create= Make a heading as a node file.
- =org-roam-alias-add= Assign a name in addition to node name.

*** Org Roam Dailies 
- =C-c n d n= Capture a note/journal for today.
- =C-c n d d= OR =org-roam-dailies-goto-today= View today's journal.
- =C-c n d Y= OR =org-roam-dailies-capture-yesterday= Capture a note for yesterday.
- =C-c n d T= OR =org-roam-dailies-capture-tomorrow= Capture a note for tomorrow.
- =C-c n d v= OR =org-roam-dailies-capture-date= Capture a note for a specific note.
- =C-c n d c= OR =org-roam-dailies-goto-date= View a note of a specific data.
- =C-c n d b= OR =org-roam-dailies-goto-back-note= Go back to one existing note from the actual note.
- =C-c n d f= OR =org-roam-dailies-goto-next-note= Go forward to one existing note from the actual note.

** References
This section is inspired by these [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oN3x3XaZQ-AXFKv52LZzjqD][videos]].

* HOLD Mail
- State "HOLD"       from              [2023-04-09 dim. 10:17] \\
  Currently using mutt, not a priority for moment
** Mu4e
#+begin_src emacs-lisp :results none :tangle no
;; Start - Emacs Mail ------------------------------------------------
;; This section is inspired by these videos
;; https://www.youtube.com/playlist?list=PLEoMzSkcN8oN3x3XaZQ-AXFKv52LZzjqD

;; Start - Streamline Your E-mail Management with mu4e - Emacs Mail --
;; https://www.youtube.com/watch?v=yZRyEhi4y44&list=PLEoMzSkcN8oM-kA19xOQc8s0gr0PpFGJQ
(use-package mu4e
  ;; using :ensure nil because we installed mu4e using the distro's
  ;; package manager to stay compatible with mbsync
  :ensure nil
  :defer 20 ; Wait until 20 seconds after startup
  ;; Path where the package manager is installed mu2e files
  ;; :load-path "/usr/share/emacs/site-lisp/mu4e/"
  ;; :defer 20 ; Wait until 20 seconds after startup
  :config

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")

  ;;  If your Gmail is set up with a different lanugage you also need
  ;;  to translate the names of these folders. For Norwegian
  ;;  "[Gmail]/Corbeille" would be "[Gmail]/Papirkurv".
  (setq mu4e-drafts-folder "/[Gmail]/Brouillons")
  (setq mu4e-sent-folder   "/[Gmail]/Messages envoyés")
  (setq mu4e-refile-folder "/[Gmail]/Tous les messages")
  (setq mu4e-trash-folder  "/[Gmail]/Corbeille")

  (setq mu4e-maildir-shortcuts
      '(("/Inbox"             . ?i)
        ("/[Gmail]/Messages envoyés" . ?s)
        ("/[Gmail]/Corbeille"     . ?t)
        ("/[Gmail]/Brouillons"    . ?d)
        ("/[Gmail]/Tous les messages"  . ?a)))

  (setq mu4e-bookmarks
	'((:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key ?i)
	  (:name "Today's messages" :query "date:today..now" :key ?t)
	  (:name "The Boss" :query "from:stallman" :key ?s)
	  (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key ?w)
	  (:name "Messages with images" :query "mime:image/*" :key ?p)))

  ;; Run mu4e in the background to sync mail periodically
  ;; (mu4e t)
  )
;; End -  Streamline Your E-mail Management with mu4e - Emacs Mail ---

;; End - Emacs Mail --------------------------------------------------
#+end_src

* Footnotes

[fn:1] Node is a Org file that contains data. 

