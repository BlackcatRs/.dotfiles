# Author: VTS
# Website: www.atomicl.net
# This script is a Biff-like script that monitors my local maildir for
# incoming new mails, automatically downloaded by Goimapnotify (for
# more details, see ../../.config/imapnotify/README.org). It then
# sends a desktop notification using the default notification daemon
# (for more details, see ../../README.org). This script requires
# certain dependencies to function, which can be downloaded using the
# following command:
# pip install PyGObject watchdog

# Author: VTS
# Website: www.atomicl.net
# A Biff-like script that monitors local maildir for incoming new mails.
# Dependencies:
#   pip install PyGObject watchdog

import os
import sys
from email.parser import Parser
import email.header
import gi
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import time

gi.require_version('Notify', '0.7')
from gi.repository import Notify

# Initialize desktop notifications
Notify.init("Mail Notification")

# Get mail directories from env variable "INBOX"
# INBOX = os.environ["INBOX"]
# MAILDIRS = [os.path.expanduser(d) for d in INBOX.split(";")]
# Specify the mail directory to watch
MAILDIRS = [
    os.path.expanduser("~/.local/share/mail/vithurshan@laposte.net/Inbox/new"),
    os.path.expanduser("~/.local/share/mail/vithurshanselvarajah@gmail.com/Inbox/new"),
]


def send_notification(sender, subject):
    notification = Notify.Notification.new(f"{sender}", f"{subject}")
    notification.show()

def text_decode(text, encoding):
    if isinstance(text, str) and encoding is None:
        return text
    if isinstance(text, bytes) and encoding is None:
        return text.decode()
    return text.decode(encoding)

class MailHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            print("[DEBUG] Created:", event.src_path)
            process_email(event.src_path)

    def on_moved(self, event):
        if not event.is_directory:
            print("[DEBUG] Moved:", event.dest_path)
            process_email(event.dest_path)

def process_email(path):
    try:
        with open(path, 'r') as file:
            email_content = file.read()
        mail = Parser().parsestr(email_content)
        sender = mail['From']
        subject = mail['Subject']
        encoding = None
        if subject is not None:
            subject, encoding = email.header.decode_header(subject)[0]
        send_notification(sender, text_decode(subject, encoding))
    except Exception as e:
        print("[ERROR] Failed to process mail:", e)

# Set up observer
observer = Observer()
handler = MailHandler()

for maildir in MAILDIRS:
    observer.schedule(handler, path=maildir, recursive=False)

observer.start()

try:
    while True:
        time.sleep(3)  # sleep 3 second
except KeyboardInterrupt:
    observer.stop()

observer.join()
