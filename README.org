#+TITLE: The Dotrice (VTS — [[https://www.atomicl.net][www.atomicl.net]]'s dotfiles)
#+DESCRIPTION: The Dotrice repo contains configuration files for various programs
#+AUTHOR: VTS

** Configuration Files for Various Programs
- Very useful scripts are in =~/.local/bin/=
- Settings for:
  - Emacs (text editor)
  - Bash (shell)
  - Ranger (file manager)
  - Dunst (Notification daemon)
  - other stuff like xdg default programs, inputrc and more, etc.
- I tried to adopt [[https://wiki.archlinux.org/title/XDG_Base_Directory][XDG Base Directory specification]] to minimize what's directly in =~= so:
  - All configs that can be in =~/.config/= are.
  - Some environmental variables have been set in =~/.bashrc= move into =~/.config/shell/env=

** Usage
The files in this repository are utilized to configure various programs I use, and their deployment is automated through the =install.sh= script.

*This script is write for Arch Linux to work with the Pacman package manager.*

First of all, clone the Dotrice repository and move into the directory:
#+begin_src shell
  https://github.com/BlackcatRs/.dotfiles.git ~/.dotfiles
  cd ~/.dotfiles
#+end_src

Then, make the =install.sh= script executable:
#+begin_src shell
  chmod +x install.sh
#+end_src

Finally, execute the script as root:
#+begin_src shell
  sudo ./install.sh
#+end_src

** My Addition to .bashrc
- ~extract~ command (defined in =.bashrc=) extracts pages from a given PDF files.
- The script [[file:.local/bin/shortcuts][shortcuts]] will generate a file =$HOME/.config/shell/shortcutrc= (sourced by =.bashrc=) with aliases based on [[file:.config/shell/bm-files][bm-files]] and [[file:.config/shell/bm-files][bm-dirs]] files. This allows to use only one or some letters to move between folder or open a file.

** Program I Utilize
- =Pandoc= - A universal document converter.
- =pdftk= - Extract pages from PDF files
- =zbarimg= - Scan and decode bar codes from image file.

*** TODO Convert text img to pdf
#+begin_src shell
  sudo pacman -S tesseract tesseract-data-eng imagemagick poppler
#+end_src

**** Method 1: Best and Easiest – Using ocrmypdf
If your image is a JPG, PNG, or even an image-only PDF, run:
#+begin_src shell
  ocrmypdf input.jpg output.pdf
#+end_src

This:
Converts the image to PDF
Runs OCR on it
Embeds the text layer into the PDF (searchable/selectable)

Add ~-l~ lang (like ~-l eng~ for English or ~-l ita~ for Italian) to specify language.

**** Method 2: Manual Tesseract + Image2PDF (More Control)
If you prefer doing it manually:

Run OCR and produce a PDF:
#+begin_src shell
tesseract input.jpg output pdf
#+end_src

The output will be output.pdf with selectable text.

You can also generate just the text with:
#+begin_src shell
  tesseract input.jpg stdout
#+end_src


** Audio Configuration
The Arch sound system is organized into different layers:
1. Drivers and interface – Hardware support and control, providing device drivers for audio hardware.
2. Usermode API (libraries) – Applications interact with this layer using libraries that offer a way to access sound-related functions.
3. Usermode sound servers (optional) – These servers, if used, enhance audio capabilities, especially in complex desktops with multiple simultaneous audio applications.
4. Sound frameworks (optional) – Optional frameworks offer a more abstract interface for developers working on audio-related applications, without relying on server processes.

A default Arch installation already includes the kernel sound system (ALSA).  ALSA — The default Linux kernel component providing device drivers and lowest-level support for audio hardware.
Which means it allow to read and write from audio devices/sound cards.

=amixer= - command-line mixer for ALSA soundcard driver.

Source: https://wiki.archlinux.org/title/sound_system

*** PulseAudio
Certain applications have the capability to directly record from or output to ALSA audio devices, such as sound cards or microphones. However, this can pose issues because some audio devices don't support multiplexing, preventing multiple programs from using the device simultaneously. On the other hand, devices with hardware mixing can handle multiple audio streams concurrently, mixing them into a single output and send to devices like speakers.

To address multiplexing and other limitations, sound servers are created. One such example is =PulseAudio=, which serves as an abstracted layer above ALSA. PulseAudio acts as a server, taking audio from programs considered as clients, delivering it to ALSA (driver), and from there to the sound card.

Another noteworthy sound server is =Jack=, designed for professional use. Jack functions as a sound server daemon, providing real-time, low-latency connections for both audio and MIDI data between applications following its API.

/Note: Some confusion may occur between ALSA and PulseAudio. ALSA includes a Linux kernel component with sound card drivers, as well as a userspace component, =libasound=. PulseAudio builds only on the kernel component, but offers compatibility with libasound through =pulseaudio-alsa=./

#+begin_src shell
  sudo pacman -S pulseaudio pulseaudio-bluetooth 
#+end_src
- =pulseaudio-alsa= for PulseAudio to manage ALSA as well, see [[https://wiki.archlinux.org/title/PulseAudio#ALSA][#ALSA]].
- =pulseaudio-bluetooth= for bluetooth support (Bluez), see [[https://wiki.archlinux.org/title/Bluetooth_headset][bluetooth headset]] page.

The =pactl= command can control the running PulseAudio sound server, offering only a subset of operations; for the complete set, use =pacmd=

Various front-ends, including =pamixer= for console-based volume control and =pavucontrol= for graphical interface, are available for controlling the PulseAudio daemon on Arch Linux.

Source : https://wiki.archlinux.org/title/PulseAudio

*** PipeWire
PipeWire is introduced as a replacement for both PulseAudio and JACK, aiming to provide minimal-latency capture and playback for both audio and video. It is a audio and video server that support PulseAudio, JACK, ALSA and GStreamer-based applications, offering a versatile solution for a wide range of audio and video requirements.

#+begin_src shell
  sudo pacman -S pipewire 
#+end_src
- Install =lib32-pipewire= [fn:1] for multilib support. 

Like JACK, PipeWire implements no connection logic internally. The burden of watching for new streams and connect them to the appropriate output device or application is left to an external component known as a session manager:
#+begin_src shell
  sudo pacman -S wireplumber
#+end_src

To use PipeWire as an audio server, install the following packages:
#+begin_src shell
  sudo pacman -S pipewire-alsa pipewire-pulse pipewire-jack 
#+end_src
- =pipewire-alsa= (and remove =pulseaudio-alsa= if it was installed) routes all applications using the ALSA API through PipeWire. 
- =pipewire-pulse= replaces the =pulseaudio= and =pulseaudio-bluetooth=. Reboot, re-login or stop =pulseaudio.service= and start the =pipewire-pulse.service= user unit to see the effect.
  /To check the good fuction of the service run the command ~pactl info~ and check for string "Server Name: PulseAudio (on PipeWire x.y.z)" in the output./
- The =pipewire-jack= for JACK support.
  /There is also =lib32-pipewire-jack= for multilib support./
  
**** Bluetooth devices
PipeWire can also handle Bluetooth audio devices by installing the =pipewire-audio= package:
#+begin_src shell
  sudo pacman -S pipewire-audio
#+end_src

**** Patchbay
To redirect an audio stream to an audio device or application using PipeWire, you can install the =pipewire-pulse= package, which includes the patchbay audio functionality:
#+begin_src shell
  sudo pacman -S qpwgraph
#+end_src

**** References
- [[https://wiki.archlinux.org/title/PipeWire][PipeWire]]

** Bluetooth Configuration
=Bluetooth= is a standard for the short-range wireless interconnection of cellular phones, computers, and other electronic devices. In Linux, the canonical implementation of the Bluetooth protocol stack is =BlueZ=.

1. Install the =bluez= package, providing the Bluetooth protocol stack.
2. Install the =bluez-utils= package, providing the bluetoothctl utility. Alternatively install =bluez-utils-compat=  (AUR Package) to additionally have the deprecated BlueZ tools.
3. The generic Bluetooth driver is the =btusb= kernel module. Check whether that module is loaded. If it is not, then load the module.
4. Start/enable =bluetooth.service=.

#+begin_src shell
  sudo pacman -S bluez bluez-utils
#+end_src

By default the Bluetooth daemon will only give out =bnep0= devices to users that are a member of the =lp= group. Make sure to add your user to that group if you intend to connect to a Bluetooth tether. You can change the group that is required in the file =/usr/share/dbus-1/system.d/bluetooth.conf=: 
#+begin_src shell
  usermod -aG lp $(whoami)
#+end_src

*** Pair Bluetooth Devices
Start the =bluetoothctl= interactive command:
1. (optional) Select a default controller with ~select MAC_address~.
2. (optional) Enter ~power on~ to turn on the controller on. It is on by default
3. Enter ~devices~ to get the MAC address of the device with which to pair.
   3.1. (optional) Enter device discovery mode with ~scan on~ command if device is not yet on the above list.
   3.2. Turn the agent on with  ~agent on~ or choose a specific agent: if you press tab twice after agent you should see a list of available agents. 
   A bluetooth agent is what manages the Bluetooth 'pairing code'. It can either respond to a 'pairing code' coming in, or can send one out. The default-agent should be appropriate in most cases.
6. Enter ~pair MAC_address~ to do the pairing.
7. If using a device without a PIN, one may need to manually trust the device before it can reconnect successfully. Enter ~trust MAC_address~ to do so.
8. Enter ~connect MAC_address~ to establish a connection.

*** Troubleshooting
If blocked by =rfkill= then unlock it.

** Notification Daemon
[[https://wiki.archlinux.org/title/Dunst][Dunst]] is a lightweight replacement for the notification-daemons:
#+begin_src shell
  sudo pacman -S dunst libnotify
#+end_src

To use Dunst, the configuration file =.dotfiles/.config/dunst/dunstrc= must be placed or symlinked to =~/.config/dunst/dunstrc=.
Next, the =/usr/bin/dunst= should be launched, so make sure your window manager or desktop environment starts it at startup/login.

** Tips/Tricks
*** Set Default applications
Programs implement default application associations in different ways. While command-line programs traditionally use environment variables, graphical applications tend to use XDG MIME Applications through either the GIO API, the Qt API, or by executing ~/usr/bin/xdg-open~, which is part of =xdg-utils=. 

Source: https://wiki.archlinux.org/title/default_applications

Identifying the MIME type for the given file extension:
#+begin_src shell
  xdg-mime query filetype Documents/test.pdf
#+end_src

#+RESULTS:
:RESULTS:
application/pdf
:END:

Discovering the default application for a specific file type:
#+begin_src shell
  xdg-mime query default application/pdf
#+end_src

#+RESULTS:
:RESULTS:
okularApplication_pdf.desktop
:END:

Setting the default application for a MIME type:
#+begin_src shell
  xdg-mime default zathura.desktop application/pdf
#+end_src

Checking if the changes were successfully applied:
#+begin_src shell
  xdg-open test.pdf
#+end_src

**** Example
Set =Zathura= as the default PDF viewer, or in other words, check whether ~xdg-open~ opens PDF files with Zathura.

First, ensure that a desktop entry for Zathura exists at =/usr/share/applications/org.pwmt.zathura.desktop=. If it does not, create one.

Then, set Zathura as the default using ~xdg-mime~:
#+begin_src shell
  xdg-mime default org.pwmt.zathura.desktop application/pdf
#+end_src

** Archive
The files mentioned below can be deleted without any side effects, they are only perserved as referened for future use: 
- Configuration files of =Xmodmap= and =Xbindkeys= have been archived into =.config= directory respectively.
- The script =mail-notif= notifies the user every time a new email is received. However, this can become annoying when a user receives a large number of emails. Therefore, the script has been archived into the =.local/bin/archive/= folder and replaced with a script that executes every X minutes."

** FIXME [2/4]
*** DONE Write a readme for Dotrice
CLOSED: [2024-03-01 Fri 21:11]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-03-01 Fri 21:11]
- State "TODO"       from              [2023-10-29 dim. 22:41] \\
  Write a proper READEME as Luke Smith
:END:

*** TODO Shortcuts to Implement
:LOGBOOK:
- State "TODO"       from              [2024-01-16 Tue 21:06]
:END:
Super + m music player
Super + i htop
Super +r ranger
super f9 mount disk with dmenu
super f10 unmount
super  f3 select a multi screen 
(gui program arandr)
super printsrc record screen
super u dropdown tmux terminal

*** ONGOING Create a script
:LOGBOOK:
- State "ONGOING"    from "TODO"       [2024-03-01 Fri 21:16]
- State "TODO"       from              [2024-01-16 Tue 21:06]
:END:
- It will create directory:
~/.config/shell
~/config/emacs

- Which link var.el to ~/config/emacs if exists.
- Install =imagemagick= for Ranger to rotate an image

*** DONE [#A] Work on mail-notify Script
CLOSED: [2024-03-10 Sun 10:38]
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-03-10 Sun 10:38]
- State "TODO"       from              [2024-03-01 Fri 21:16]
:END:
